@page
@model CallAnalysisWeb.Pages.Stats.StatsModel
@{
    ViewData["Title"] = "Статистика звонков";
}

<h2>Статистика звонков</h2>

<!-- Подключаем библиотеку Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<div class="row">
    <!-- Первая диаграмма: Суммарная длительность звонков -->
    <div class="col-md-6">
        <canvas id="callDurationChart"></canvas>
    </div>

    <!-- Вторая диаграмма: Наибольшее количество звонков -->
    <div class="col-md-6">
        <canvas id="callCountChart"></canvas>
    </div>
</div>

<div class="row">
    <!-- Третья диаграмма: Принятые / пропущенные звонки -->
    <div class="col-md-3">
        <canvas id="callStatusChart"></canvas>
    </div>

    <!-- Четвертая диаграмма: Загруженность сотрудников -->
    <div class="col-md-6">
        <canvas id="agentLoadChart"></canvas>
    </div>
</div>

<!-- Таблица с информацией о клиентах, не совершавших звонки -->
<h3>Клиенты без звонков</h3>
<table class="table">
    <thead>
        <tr>
            <th>Компания</th>
            <th>Номер телефона</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var client in Model.ClientsWithoutCalls)
        {
            <tr>
                <td>@client.CompanyName</td>
                <td>@client.PhoneNumber</td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
    <script>
        // Данные для первой диаграммы
        var callDurationData = {
            labels: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.ClientsWithLongestCalls.Select(c => c.ClientName))),
            datasets: [{
                label: 'Суммарная длительность звонков (минуты)',
                data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.ClientsWithLongestCalls.Select(c => c.TotalDuration))),
                backgroundColor: 'rgba(54, 162, 235, 0.6)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1
            }]
        };

        var callDurationConfig = {
            type: 'bar',
            data: callDurationData,
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        };

        var callDurationChart = new Chart(
            document.getElementById('callDurationChart'),
            callDurationConfig
        );

        // Данные для второй диаграммы
        var callCountData = {
            labels: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.ClientsWithMostCalls.Select(c => c.ClientName))),
            datasets: [{
                label: 'Количество звонков',
                data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.ClientsWithMostCalls.Select(c => c.CallCount))),
                backgroundColor: 'rgba(255, 99, 132, 0.6)',
                borderColor: 'rgba(255, 99, 132, 1)',
                borderWidth: 1
            }]
        };

        var callCountConfig = {
            type: 'bar',
            data: callCountData,
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        };

        var callCountChart = new Chart(
            document.getElementById('callCountChart'),
            callCountConfig
        );

        // Данные для третьей диаграммы
        var callStatusData = {
            labels: ['Принятые', 'Пропущенные'],
            datasets: [{
                data: [@Model.AcceptedCallsCount, @Model.MissedCallsCount],
                backgroundColor: [
                    'rgba(75, 192, 192, 0.6)',
                    'rgba(255, 159, 64, 0.6)'
                ],
                borderColor: [
                    'rgba(75, 192, 192, 1)',
                    'rgba(255, 159, 64, 1)'
                ],
                borderWidth: 1
            }]
        };

        var callStatusConfig = {
            type: 'pie',
            data: callStatusData
        };

        var callStatusChart = new Chart(
            document.getElementById('callStatusChart'),
            callStatusConfig
        );

        // Данные для четвертой диаграммы
        var agentLoadData = {
            labels: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.AgentLoad.Select(a => a.SupportAgentName))),
            datasets: [{
                label: 'Загруженность сотрудников (минуты)',
                data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.AgentLoad.Select(a => a.TotalDuration))),
                backgroundColor: 'rgba(153, 102, 255, 0.6)',
                borderColor: 'rgba(153, 102, 255, 1)',
                borderWidth: 1
            }]
        };

        var agentLoadConfig = {
            type: 'bar',
            data: agentLoadData,
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        };

        var agentLoadChart = new Chart(
            document.getElementById('agentLoadChart'),
            agentLoadConfig
        );
    </script>
}
