@page
@model CallAnalysisWeb.Pages.Stats.StatsModel
@{
    ViewData["Title"] = "Аналитика звонков";
}

<h1>@ViewData["Title"]</h1>


<!-- Первая диаграмма: Суммарная длительность звонков -->
<div style="margin-bottom: 20px;">
    <h2>Суммарная длительность звонков</h2>
    <canvas id="totalDurationChart"></canvas>
</div>


<!-- Вторая диаграмма: Наибольшее количество звонков -->
<div style="margin-bottom: 20px;">
    <h2>Наибольшее количество звонков</h2>
    <canvas id="callCountChart"></canvas>
</div>


<div style="display: flex; margin-bottom: 20px;">

    <!-- Третья диаграмма: Статистика звонков -->
    <div style="flex: 0.80;">
        <h2>Статистика звонков</h2>
        <canvas id="callStatusChart"></canvas>
    </div>

    <!-- Четвертая диаграмма: Загруженность сотрудников -->
    <div style="flex: 2.20; margin-left: 20px;">
        <h2>Загруженность сотрудников</h2>
        <canvas id="supportAgentLoadChart"></canvas>
    </div>
</div>


<!-- Пятая диаграмма: Статистика времени ожидания -->
<h2>Статистика времени ожидания</h2>
<div style="width: 60%; height: 350px; margin: auto;">
    <canvas id="waitingTimeChart"></canvas>
</div>


<!-- Таблица с информацией о клиентах, не совершавших звонки -->
<div style="margin-bottom: 30px">
    <h3>Клиенты, не совершавшие звонков за выбранный период</h3>
    <table class="table">
        <thead>
            <tr>
                <th>Компания</th>
                <th>Номер телефона</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var client in Model.ClientsWithoutCalls)
            {
                <tr>
                    <td>@client.CompanyName</td>
                    <td>@client.PhoneNumber</td>
                </tr>
            }
        </tbody>
    </table>
</div>


@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        var totalDurationData = {
            labels: @Html.Raw(Json.Serialize(Model.ClientsWithLongestCalls.Select(c => c.CompanyName))),
            datasets: [{
                label: 'Минуты',
                data: @Html.Raw(Json.Serialize(Model.ClientsWithLongestCalls.Select(c => c.TotalDuration))),
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }]
        };

        var callCountData = {
            labels: @Html.Raw(Json.Serialize(Model.ClientsWithMostCalls.Select(c => c.CompanyName))),
            datasets: [{
                label: 'Количество звонков',
                data: @Html.Raw(Json.Serialize(Model.ClientsWithMostCalls.Select(c => c.CallCount))),
                backgroundColor: 'rgba(153, 102, 255, 0.2)',
                borderColor: 'rgba(153, 102, 255, 1)',
                borderWidth: 1
            }]
        };
        
        var supportAgentLoadData = {
            labels: @Html.Raw(Json.Serialize(Model.SupportAgentLoad.Select(e => e.SupportAgentName))),
            datasets: [{
                label: 'Минуты',
                data: @Html.Raw(Json.Serialize(Model.SupportAgentLoad.Select(e => e.TotalDuration))),
                backgroundColor: 'rgba(255, 159, 64, 0.2)',
                borderColor: 'rgba(255, 159, 64, 1)',
                borderWidth: 1
            }]
        };

        var callTypeData = @Json.Serialize(Model.CallTypeDistribution);

        var waitingTimeData = @Json.Serialize(Model.WaitingTimeStatistics);

        //////////////////////////////////////////////////////////////////////////////////////////////////

        var totalDurationCtx = document.getElementById('totalDurationChart').getContext('2d');
        var totalDurationChart = new Chart(totalDurationCtx, {
            type: 'bar',
            data: totalDurationData,
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        var callCountCtx = document.getElementById('callCountChart').getContext('2d');
        var callCountChart = new Chart(callCountCtx, {
            type: 'bar',
            data: callCountData,
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        var callTypeCtx = document.getElementById('callStatusChart').getContext('2d');
        var callTypeChart = new Chart(callTypeCtx, {
            type: 'pie',
            data: {
                labels: Object.keys(callTypeData),
                datasets: [{
                    data: Object.values(callTypeData),
                    backgroundColor: Object.keys(callTypeData).map(type => {
                        if (type === "пропущенный") {
                            return 'rgba(255, 69, 58, 0.3)';  // Красный
                        }
                        else if (type === "исходящий") {
                            return 'rgba(0, 122, 255, 0.3)'; // Синий
                        }
                        else if (type === "входящий") {
                            return 'rgba(52, 199, 89, 0.3)'; // Зеленый
                        }
                        else if (type === "неуспешный исходящий") {
                            return 'rgba(255, 149, 0, 0.3)';  // Оранжевый
                        }

                        return 'rgba(142, 142, 147, 0.3)';  // Серый
                    }),
                    borderColor: Object.keys(callTypeData).map(type => {
                        if (type === "пропущенный") {
                            return 'rgba(255, 69, 58, 1)';  // Красный
                        }
                        else if (type === "исходящий") {
                            return 'rgba(0, 122, 255, 1)'; // Синий
                        }
                        else if (type === "входящий") {
                            return 'rgba(52, 199, 89, 1)'; // Зеленый
                        }
                        else if (type === "неуспешный исходящий") {
                            return 'rgba(255, 149, 0, 1)';  // Оранжевый
                        }

                        return 'rgba(142, 142, 147, 1)';  // Серый
                    }),
                    borderWidth: 1
                }]
            },
        });

        var supportAgentLoadCtx = document.getElementById('supportAgentLoadChart').getContext('2d');
        var supportAgentLoadChart = new Chart(supportAgentLoadCtx, {
            type: 'bar',
            data: supportAgentLoadData,
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });


        var waitingTimeCtx = document.getElementById('waitingTimeChart').getContext('2d');
        var waitingTimeChart = new Chart(waitingTimeCtx, {
            type: 'bar',
            data: {
                labels: ['Среднее время ожидания', 'Максимальное время ожидания', 'Минимальное время ожидания'],
                datasets: [{
                    label: 'Время ожидания (в секундах)',
                    data: Object.values(waitingTimeData),
                    backgroundColor: [
                        'rgba(75, 192, 192, 0.3)',
                        'rgba(255, 99, 132, 0.3)',
                        'rgba(54, 162, 235, 0.3)'
                    ],
                    borderColor: [
                        'rgba(75, 192, 192, 1)',
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    }
                }
            }
        });
    </script>
}
